type: edu
custom_name: stage4
files:
- name: src/parking/Main.kt
  visible: true
  text: |-
    package parking

    const val isInDebugMode: Boolean = false

    fun main() {

        do {
            readCommand(Parking()).execute()
        } while (readCommand(Parking()).execute().equals("exit"))

    }

    fun readCommand(parking: Parking): ICommand {
        var userInput = Utils.readUserInput()
        var commandResult = CommandResult(userInput)

        if (commandResult.command.equals("park")) {
            return object : ICommand {
                override fun execute() {
                    parking.parkOnSpot(Vehicle(commandResult.regNumber, commandResult.colour))
                }
            }
        } else if (commandResult.command.equals("leave")) {
            return object : ICommand {
                override fun execute() {
                    parking.leaveASpot(commandResult.spotNumber)
                }
            }
        } else if (commandResult.command.equals("exit")) {
            return object : ICommand {
                override fun execute() {
                    println("exiting....")
                }

            }
        } else {
            return object : ICommand {
                override fun execute() {
                    TODO("Not yet implemented")
                }
            }
        }
    }
  learner_created: false
- name: src/parking/ParkingEvent.kt
  visible: true
  text: |
    package parking

    data class ParkingEvent(
        var _registrationNumber: String,
        var _colour: String
    ) {
        val registrationNumber = _registrationNumber
            get(): String {
                return if (field != "") "" else field
            }

        val colour: String
            get() = _colour
    }
  learner_created: false
- name: src/parking/CommandResult.kt
  visible: true
  text: |-
    package parking

    class CommandResult(command: List<String>) {
        val command: String = command[0]
        var regNumber: String? = null
        var colour: String? = null
        var spotNumber: Int? = null

        init {
            when {
                command[0].equals("leave") -> {
                    spotNumber = command[1].toInt()
                }
                command[0].equals("park") -> {
                    regNumber = command[1]
                    colour = command[2]
                }
            }
        }
    }
  learner_created: false
- name: src/parking/ConsoleMessageHandler.kt
  visible: true
  text: |+
    package parking;

    class ConsoleMessageHandler : IMessageHandler {

        override fun handleMessage(message: String) {
            println(message)
        }
    }

  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)

    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String): CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my != his) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size} " +
                        "lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task4Test : StageTest<OutputClue>() {

        override fun generate() = listOf(
                outputCase(
                        """
                            park KA-01-HH-9999 White
                            create 3
                            status
                            park KA-01-HH-9999 White
                            park KA-01-HH-3672 Green
                            park Rs-P-N-21 Red
                            leave 2
                            status
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Created a parking lot with 3 spots.
                            Parking lot is empty.
                            White car parked in spot 1.
                            Green car parked in spot 2.
                            Red car parked in spot 3.
                            Spot 2 is free.
                            1 KA-01-HH-9999 White
                            3 Rs-P-N-21 Red
                """.trimAllIndents(),
                        hint = "See example 1."),
                outputCase(
                        """
                            park KA-01-HH-9999 White
                            leave 1
                            status
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                """.trimAllIndents(),
                        true,
                        hint = "Check commands until the parking is created."),
                outputCase(
                        """
                            create 3
                            park KA-01-HH-9999 White
                            park KA-01-HH-9998 Red
                            status
                            create 1
                            status
                            park KA-01-HH-9999 Black
                            status
                            park KA-01-HH-9998 Black
                            exit
                        """.trimAllIndents(),
                        """
                            Created a parking lot with 3 spots.
                            White car parked in spot 1.
                            Red car parked in spot 2.
                            1 KA-01-HH-9999 White
                            2 KA-01-HH-9998 Red
                            Created a parking lot with 1 spots.
                            Parking lot is empty.
                            Black car parked in spot 1.
                            1 KA-01-HH-9999 Black
                            Sorry, the parking lot is full.
                """.trimAllIndents(),
                        true,
                        hint = "Try to recreate the parking.")


        )


        override fun check(reply: String, clue: OutputClue): CheckResult {

            return clue.compareLines(reply)
        }
    }

  learner_created: false
- name: src/parking/ParkingSpace.kt
  visible: true
  text: |-
    package parking

    interface ParkingSpace {
        fun parkOnSpot(vehicle: Vehicle)

        fun leaveASpot(int: Int?)

        fun hasAFreeSpot(): Boolean
    }
  learner_created: true
- name: src/parking/Utils.kt
  visible: true
  text: |-
    package parking
    class Utils {
        companion object {
            fun readUserInput(): List<String> {
                return readLine()?.let {
                    it.split(" ")
                } ?: "-1" as List<String>
            }
        }
    }
  learner_created: true
- name: src/parking/Vehicle.kt
  visible: true
  text: |-
    package parking

    data class Vehicle(val regNumber: String?, val colour: String?) {

    }
  learner_created: true
- name: src/parking/FindSpaceAlgorithm.kt
  visible: true
  text: |-
    package parking

    interface FindSpaceAlgorithm {

        fun findFirstFreeSpot()
    }
  learner_created: true
- name: src/parking/MessageHandler.kt
  visible: true
  text: |-
    package parking

    interface MessageHandler {
        fun handleMessage(message: String)
    }
  learner_created: true
- name: src/parking/Parking.kt
  visible: true
  text: |-
    package parking

    import java.util.*

    class Parking(
        private val handler: MessageHandler = ConsoleMessageHandler(),
    //    private val initialState: List<Vehicle> = emptyList()
    ) : ParkingSpace {

        //    private val parkingSpace = mutableListOf<Vehicle>(
    //        // Project initial assumptions
    //        // 1. First slot is already occupied
    //        // 2. Second slot is free
    ////        Vehicle("dummyNumber", "dummyColour"),
    ////        Vehicle("DB-123-12", "Orange")
    //    )
        private val parkingSize: Int = 20
        private val parkingSpace: Array<Vehicle?> = arrayOfNulls(parkingSize)

        override fun parkOnSpot(vehicle: Vehicle) {
            for (parkingLot in parkingSpace.indices) {
                if (parkingSpace[parkingLot] === null) {
                    parkingSpace[parkingLot] = vehicle
                    handler.handleMessage("${vehicle.colour} car parked in spot ${parkingLot + 1}.")
                    //println(parkingSpace.contentToString())
                    break
                }
                if (!hasAFreeSpot()) {
                    handler.handleMessage("Sorry, the parking lot is full.")
                    break
                }
            }

        }

        override fun leaveASpot(int: Int?) {
            if (parkingSpace.getOrNull(int!! -1) == null) {
                    handler.handleMessage("There is no car in spot ${int}.")
                } else {
                    parkingSpace[int-1] = null
                    handler.handleMessage("Spot $int is free.")
                }
        }

        override fun hasAFreeSpot(): Boolean {
            var count = 0
            for (parkingLot in parkingSpace.indices) {
                if (parkingSpace[parkingLot] === null) {
                    count++
                }
            }
            return count > 0
        }

    }
  learner_created: true
- name: src/parking/Command.kt
  visible: true
  text: |-
    package parking

    interface Command {
        fun execute(): String
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/6600#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 21 Apr 2023 09:17:09 UTC"
record: 4

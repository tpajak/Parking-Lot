type: edu
custom_name: stage5
files:
- name: src/parking/Main.kt
  visible: true
  text: |-
    package parking

    const val isInDebugMode: Boolean = false

    fun main() {

        do {
            readCommand(Parking()).execute()
        } while (readCommand(Parking()).execute().equals("exit"))

    }

    fun readCommand(parking: Parking): ICommand {
        var userInput = Utils.readUserInput()
        var commandResult = CommandResult(userInput)

        if (commandResult.command.equals("park")) {
            return object : ICommand {
                override fun execute() {
                    parking.parkOnSpot(Vehicle(commandResult.regNumber, commandResult.colour))
                }
            }
        } else if (commandResult.command.equals("leave")) {
            return object : ICommand {
                override fun execute() {
                    parking.leaveASpot(commandResult.spotNumber)
                }
            }
        } else if (commandResult.command.equals("exit")) {
            return object : ICommand {
                override fun execute() {
                    println("exiting....")
                }

            }
        } else {
            return object : ICommand {
                override fun execute() {
                    TODO("Not yet implemented")
                }
            }
        }
    }
  learner_created: false
- name: src/parking/ParkingEvent.kt
  visible: true
  text: |
    package parking

    data class ParkingEvent(
        var _registrationNumber: String,
        var _colour: String
    ) {
        val registrationNumber = _registrationNumber
            get(): String {
                return if (field != "") "" else field
            }

        val colour: String
            get() = _colour
    }
  learner_created: false
- name: src/parking/CommandResult.kt
  visible: true
  text: |-
    package parking

    class CommandResult(command: List<String>) {
        val command: String = command[0]
        var regNumber: String? = null
        var colour: String? = null
        var spotNumber: Int? = null

        init {
            when {
                command[0].equals("leave") -> {
                    spotNumber = command[1].toInt()
                }
                command[0].equals("park") -> {
                    regNumber = command[1]
                    colour = command[2]
                }
            }
        }
    }
  learner_created: false
- name: src/parking/ConsoleMessageHandler.kt
  visible: true
  text: |+
    package parking;

    class ConsoleMessageHandler : IMessageHandler {

        override fun handleMessage(message: String) {
            println(message)
        }
    }

  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output." + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }


    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String): CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my.toLowerCase() != his.toLowerCase()) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size} " +
                        "lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task5Test : StageTest<OutputClue>() {

        override fun generate() = listOf(
                outputCase(
                        """
                            spot_by_color yellow
                            create 4
                            park KA-01-HH-9999 White
                            park KA-01-HH-3672 White
                            park Rs-P-N-21 Red
                            park Rs-P-N-22 Red
                            reg_by_color GREEN
                            reg_by_color WHITE
                            spot_by_color GREEN
                            spot_by_color red
                            spot_by_reg ABC
                            spot_by_reg KA-01-HH-3672
                            spot_by_reg Rs-P-N-21
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Created a parking lot with 4 spots.
                            White car parked in spot 1.
                            White car parked in spot 2.
                            Red car parked in spot 3.
                            Red car parked in spot 4.
                            No cars with color GREEN were found.
                            KA-01-HH-9999, KA-01-HH-3672
                            No cars with color GREEN were found.
                            3, 4
                            No cars with registration number ABC were found.
                            2
                            3
                """.trimAllIndents(),
                        hint = "See example 1."
                ),
                outputCase(
                        """
                            spot_by_color yellow
                            reg_by_color yellow
                            spot_by_reg yellow
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check commands until the parking is created."
                ),
                outputCase(
                        """
                            create 5
                            park A AA
                            park B BB
                            park C BB
                            park D AA
                            park E AA
                            leave 4
                            reg_by_color aa
                            reg_by_color bb
                            reg_by_color zz
                            spot_by_color aa
                            spot_by_color bb
                            spot_by_color zz
                            spot_by_reg A
                            spot_by_reg B
                            spot_by_reg Z
                            exit
                        """.trimAllIndents(),
                        """
                            Created a parking lot with 5 spots.
                            AA car parked in spot 1.
                            BB car parked in spot 2.
                            BB car parked in spot 3.
                            AA car parked in spot 4.
                            AA car parked in spot 5.
                            Spot 4 is free.
                            A, E
                            B, C
                            No cars with color zz were found.
                            1, 5
                            2, 3
                            No cars with color zz were found.
                            1
                            2
                            No cars with registration number Z were found.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check the case, when the parking is not full."
                )

        )

        override fun check(reply: String, clue: OutputClue): CheckResult {
            return clue.compareLines(reply)
        }
    }
  learner_created: false
- name: src/parking/ParkingSpace.kt
  visible: true
  text: |-
    package parking

    interface ParkingSpace {
        fun parkOnSpot(vehicle: Vehicle)

        fun leaveASpot(int: Int?)

        fun hasAFreeSpot(): Boolean

        fun status()

        fun setSize(parkingSize: Int): Int

        fun getParkingSize(): Int
    }
  learner_created: true
- name: src/parking/Utils.kt
  visible: true
  text: |-
    package parking
    class Utils {
        companion object {
            fun readUserInput(): List<String> {
                return readLine()?.let {
                    it.split(" ")
                } ?: "-1" as List<String>
            }
        }
    }
  learner_created: true
- name: src/parking/Vehicle.kt
  visible: true
  text: |-
    package parking

    data class Vehicle(val regNumber: String?, val colour: String?) {

    }
  learner_created: true
- name: src/parking/FindSpaceAlgorithm.kt
  visible: true
  text: |-
    package parking

    interface FindSpaceAlgorithm {

        fun findFirstFreeSpot()
    }
  learner_created: true
- name: src/parking/MessageHandler.kt
  visible: true
  text: |-
    package parking

    interface MessageHandler {
        fun handleMessage(message: String)
    }
  learner_created: true
- name: src/parking/Parking.kt
  visible: true
  text: |-
    package parking

    class Parking(
        private val handler: MessageHandler,
        private var parkingSize: Int,
    ) : ParkingSpace {

        private var parkingSpace: Array<Vehicle?> = arrayOfNulls(parkingSize)

        override fun parkOnSpot(vehicle: Vehicle) {
            if (parkingSize == 0) {
                handler.handleMessage("Sorry, a parking lot has not been created.")
            } else {
                for (parkingLot in parkingSpace.indices) {
                    if (parkingSpace[parkingLot] === null) {
                        parkingSpace[parkingLot] = vehicle
                        handler.handleMessage("${vehicle.colour} car parked in spot ${parkingLot + 1}.")
                        //println(parkingSpace.contentToString())
                        break
                    }
                    if (!hasAFreeSpot()) {
                        handler.handleMessage("Sorry, the parking lot is full.")
                        break
                    }
                }
            }

        }

        override fun leaveASpot(int: Int?) {
            if (parkingSize == 0) {
                handler.handleMessage("Sorry, a parking lot has not been created.")
            } else {
                if (parkingSpace.getOrNull(int!! - 1) == null) {
                    handler.handleMessage("There is no car in spot ${int}.")
                } else {
                    parkingSpace[int - 1] = null
                    handler.handleMessage("Spot $int is free.")
                }
            }
        }

        override fun hasAFreeSpot(): Boolean {
            var count = 0
            for (parkingLot in parkingSpace.indices) {
                if (parkingSpace[parkingLot] === null) {
                    count++
                }
            }
            return count > 0
        }

        override fun status() {
            if (parkingSize == 0) {
                handler.handleMessage("Sorry, a parking lot has not been created.")
            } else {
                var isArrayEmpty: Boolean = true

                for (parkingLot in parkingSpace.indices) {
                    if (parkingSpace[parkingLot] != null) {
                        println("${parkingLot + 1} ${parkingSpace[parkingLot]?.regNumber} ${parkingSpace[parkingLot]?.colour}")
                    }
                    if (parkingSpace[parkingLot] != null) {
                        isArrayEmpty = false
                    }
                }
                if (isArrayEmpty) {
                    println("Parking lot is empty.")
                }
            }
        }

        override fun setSize(parkingSize: Int): Int {
            this.parkingSize = parkingSize
            parkingSpace = arrayOfNulls(parkingSize)
            println("Created a parking lot with ${parkingSize} spots.")
            return this.parkingSize
        }

        override fun getParkingSize(): Int {
            return this.parkingSize
        }

    }
  learner_created: true
- name: src/parking/Command.kt
  visible: true
  text: |-
    package parking

    interface
    Command {
        fun execute(): String
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/6601#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Error in line 1: &quot;Created a parking lot with 4 spots.&quot; instead of &quot;Sorry, a parking lot has not been created.&quot;. See example 1.

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    &gt; spot_by_color yellow
    &gt; create 4
    Created a parking lot with 4 spots.
    &gt; park KA-01-HH-9999 White
    White car parked in spot 1.
    &gt; park KA-01-HH-3672 White
    White car parked in spot 2.
    &gt; park Rs-P-N-21 Red
    Red car parked in spot 3.
    &gt; park Rs-P-N-22 Red
    Red car parked in spot 4.
    &gt; reg_by_color GREEN
    &gt; reg_by_color WHITE
    &gt; spot_by_color GREEN
    &gt; spot_by_color red
    &gt; spot_by_reg ABC
    &gt; spot_by_reg KA-01-HH-3672
    &gt; spot_by_reg Rs-P-N-21
    &gt; exit
  time: "Fri, 21 Apr 2023 09:16:08 UTC"
record: 5
